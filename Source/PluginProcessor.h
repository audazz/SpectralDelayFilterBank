/*
==============================================================================

This file was auto-generated by the Jucer!

It contains the basic startup code for a Juce application.

==============================================================================
*/

#ifndef __PLUGINPROCESSOR_H_C0FD7140__
#define __PLUGINPROCESSOR_H_C0FD7140__

#include <vector>
#include "../JuceLibraryCode/JuceHeader.h"
#include "CircularBuffer.h"
#include "FFTfilter.h"

//==============================================================================
/**
*/
class SpectralDelayPluginAudioProcessor  : public AudioProcessor
{
public:
	static const int maxTimeDelayInMs = 2000;
	//==============================================================================
	SpectralDelayPluginAudioProcessor();
	~SpectralDelayPluginAudioProcessor();

	//==============================================================================
	void prepareToPlay (double sampleRate, int samplesPerBlock)override;
	void releaseResources()override;

#ifndef JucePlugin_PreferredChannelConfigurations
    bool isBusesLayoutSupported (const BusesLayout& layouts) const override;
#endif
    
    void processBlock (AudioBuffer<float>&, MidiBuffer&) override;
    //==============================================================================
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;
    
    //==============================================================================
    const String getName() const override;
    
    bool acceptsMidi() const override;
    bool producesMidi() const override;
    bool isMidiEffect() const override;
    double getTailLengthSeconds() const override;
    
    //==============================================================================
    int getNumPrograms() override;
    int getCurrentProgram() override;
    void setCurrentProgram (int index) override;
    const String getProgramName (int index) override;
    void changeProgramName (int index, const String& newName) override;
    
    //==============================================================================
    void getStateInformation (MemoryBlock& destData) override;
    void setStateInformation (const void* data, int sizeInBytes) override;
    //==============================================================================
    
    int getNumParameters()override ;
    
    float getParameter (int index)override;

    void setParameter (int index, float newValue)override;
    
    const String getParameterName (int index)override;
    
    const String getParameterText (int index)override;
    
    const String getInputChannelName (int channelIndex) const override;
    
    const String getOutputChannelName (int channelIndex) const override;
    
    bool isInputChannelStereoPair (int index) const override;
    
    bool isOutputChannelStereoPair (int index) const override;
    
    void reset()override;
   	//Helper and accessor methods
	int getMaxSampleDelay(void)
	{
		return maxSampleDelay;
	};

	int getDelayAmount(int index)
	{
		return delayAmounts[index];
	};

	enum Paramters
	{
		f0_delayParam = 0,
		f1_delayParam,
		f2_delayParam,
		f3_delayParam,
		f4_delayParam,
		totalNumParams
	};

private:
	//==============================================================================
	int N;
	//delay line length/max delay/individual filter delays in samples
	int maxSampleDelay;
	int numFilters;
	std::vector<int> delayAmounts;

	//vectors are used here as the goal is to evenutally let users give an arbitrary impulse response to be convolved with
	//vector to hold pointers to filters
	std::vector<ScopedPointer<FFTfilter>> filterVector;
	//vector to hold pointers to delay lines
	std::vector<ScopedPointer<CircularBuffer<double>>> delayLineVector;
	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (SpectralDelayPluginAudioProcessor);
};

#endif  // __PLUGINPROCESSOR_H_C0FD7140__
